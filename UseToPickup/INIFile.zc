struct U2P_INIFile {
	// Bit mask for which of the 32 first ASCII characters is whitespace.
	// ASCII 32 (space) doesn't fit into a 32-bit integer, so it's handled separately.
	const WhitespaceASCIIChars = 15872;
	
	static String TrimSpace(String s, bool fromStart = true, bool fromEnd = true) {
		let len = s.Length();
		if (len == 0)
			return "";
		
		int start = 0, end = max(len - 1, 0);
		
		// Find first non-whitespace character.
		if (fromStart)
		for (let i = 0; i < len; i++) {
			let code = s.CharCodeAt(i);
			if (
				code == 32 ||
				(code <= 31 && ((1 << code) & WhitespaceASCIIChars))
			)
				start = i + 1;
			else
				break;
		}
		
		// Find last non-whitespace character.
		if (fromEnd)
		for (let i = end; i > start; i--) {
			let code = s.CharCodeAt(i);
			if (
				code == 32 ||
				(code <= 31 && ((1 << code) & WhitespaceASCIIChars))
			)
				end = i - 1;
			else
				break;
		}
		
		if (start > end)
			return "";
		else
			return s.Mid(start, (end - start) + 1);
	}
	
	static bool IsAllSpace(String s) {
		for (let i = 0, len = s.Length(); i < len; i++) {
			let code = s.CharCodeAt(i);
			if (
				code != 32 &&
				(code > 31 || !((1 << code) & WhitespaceASCIIChars))
			)
				return false;
		}
		
		return true;
	}
	
	static bool ParseBool(String s) {
		if (s == "1" || s ~== "true" || s ~== "yes")
			return true;
		else if (!s || s == "0" || s ~== "false" || s ~== "no")
			return false;
		else {
			Console.Printf("\cgInvalid bool value: %s", s);
			return false;
		}
	}
	
	Array<U2P_INISection> Sections;
	bool SectionCaseSensitive, KeyCaseSensitive;
	
	void Clear() {
		Sections.Clear();
	}
	
	void Read(int lump) {
		let text = Wads.ReadLump(lump);
		Array<String> lines;
		text.Split(lines, "\n", TOK_SKIPEMPTY);
		U2P_INISection curSection = null;
		uint curKey = uint.max;
		
		for (uint lineNum = 0, lineCount = lines.Size(); lineNum < lineCount; lineNum++) {
			let line = TrimSpace(lines[lineNum]);
			
			// Skip blank lines and comment lines.
			if (line == "" || line.CharAt(0) == "#")
				continue;
			
			if (line.CharAt(0) == "[") {
				// This is a section header.
				let end = line.IndexOf("]", 1);
				
				if (end < 0) {
					Console.Printf("\cgLump %d line %d: Section header does not contain a ']' character.", lump, lineNum);
					end = line.Length();
				}
				else if (end != line.Length() - 1) {
					Console.Printf("\cgLump %d line %d: Ignoring garbage text after end of section header: %s", lump, lineNum, line.Mid(end + 1));
				}
				
				let sectionName = line.Mid(1, end - 1);
				
				curSection = NewSection(sectionName);
				curKey = uint.max;
			}
			else {
				if (!curSection) {
					// No section for this key, so make a special blank section for it.
					curSection = NewSection("");
				}
				
				let equalSign = line.IndexOf("=");
				
				if (equalSign >= 0) {
					// This is a key=value line.
					let key = TrimSpace(line.Left(equalSign), fromStart: false);
					let value = TrimSpace(line.Mid(equalSign + 1), fromEnd: false);
					String oldValue;
					[oldValue, curKey] = curSection.Set(key, value);
				}
				else if (curKey != uint.max) {
					// This is a continuation line. Append its contents to the value of the current key.
					curSection.Values[curKey] = curSection.Values[curKey] .. (curSection.Values[curKey] == ""? "" : "\n") .. line;
				}
				else {
					// This is garbage.
					Console.Printf("\cgLump %d line %d: Ignoring garbage text: %s", lump, lineNum, line);
				}
			}
		}
	}
	
	void ReadLumpsNamed(String lumpName, int ns = Wads.GlobalNamespace) {
		for (let lump = Wads.FindLump(lumpName, ns: ns); lump >= 0; lump = Wads.FindLump(lumpName, lump + 1, ns: ns))
			Read(lump);
	}
	
	U2P_INISection NewSection(String name) {
		let s = Section(name);
		if (!s) {
			s = new("U2P_INISection");
			s.Name = name;
			s.KeyCaseSensitive = KeyCaseSensitive;
			Sections.Push(s);
		}
		return s;
	}
	
	U2P_INISection, uint Section(String sectionName) const {
		uint i, s;
		for (i = 0, s = Sections.Size(); i < s; i++) {
			let section = Sections[i];
			if (!section)
				continue;
			let foundName = section.name;
			if (SectionCaseSensitive? foundName == sectionName : foundName ~== sectionName)
				return section, i;
		}
		
		return null, i;
	}
	
	U2P_INISection CurrentMapSection() const {
		return Section(level.MapName);
	}
	
	String, U2P_INISection, uint Get(String sectionName, String key) const {
		let section = Section(sectionName);
		if (!section)
			return "", null, 0;
		
		String value;
		uint keyIndex;
		[value, keyIndex] = section.Get(key);
		
		return value, section, keyIndex;
	}
	
	int, U2P_INISection, uint GetInt(String sectionName, String key, int base = 0) const {
		String s;
		U2P_INISection sec;
		uint i;
		[s, sec, i] = Get(sectionName, key);
		return s.ToInt(base), sec, i;
	}
	
	double, U2P_INISection, uint GetDouble(String sectionName, String key) const {
		String s;
		U2P_INISection sec;
		uint i;
		[s, sec, i] = Get(sectionName, key);
		return s.ToDouble(), sec, i;
	}
	
	bool, U2P_INISection, uint GetBool(String sectionName, String key) const {
		String s;
		U2P_INISection sec;
		uint i;
		[s, sec, i] = Get(sectionName, key);
		return ParseBool(s), sec, i;
	}
	
	String, U2P_INISection, uint CurrentMapGet(String key) const {
		return Get(level.MapName, key);
	}
	
	int, U2P_INISection, uint CurrentMapGetInt(String key, int base = 0) const {
		return GetInt(level.MapName, key, base);
	}
	
	double, U2P_INISection, uint CurrentMapGetDouble(String key) const {
		return GetDouble(level.MapName, key);
	}
	
	bool, U2P_INISection, uint CurrentMapGetBool(String key) const {
		return GetBool(level.MapName, key);
	}
	
	String, U2P_INISection, uint Set(String sectionName, String key, String value) {
		let section = NewSection(sectionName);
		String oldValue;
		uint keyIndex;
		[oldValue, keyIndex] = section.Set(key, value);
		return oldValue, section, keyIndex;
	}
	
	void DumpToConsole() const {
		for (uint sec = 0, secs = Sections.Size(); sec < secs; sec++) {
			let so = Sections[sec];
			Console.Printf("[%s]", so.Name);
			
			for (uint key = 0, keys = so.Keys.Size(); key < keys; key++)
				Console.Printf("%s=%s", so.Keys[key], so.Values[key]);
		}
	}
	
	/**
	 * Scan all loaded actor classes, and merge together keys in the corresponding INI sections.
	 *
	 * Section names ending with + apply to that class and all subclasses.  
	 * Section names ending with - apply to that class and all superclasses.
	 *
	 * The result will be that all keys in + or - sections appear in the corresponding exact-match sections.
	 *
	 * If this method will be used, SectionCaseSensitive must be false *before* loading INI files. If it is true, this method will set it to false and log a warning.
	 *
	 * @param purgeSuperSubSections If true, + and - sections will be removed after merging.
	 * @param purgeNoMatch If true, sections matching no known class will be removed after merging.
	 */
	void MergeByActorClass(bool purgeSuperSubSections = false, bool purgeNoMatch = false) {
		if (SectionCaseSensitive) {
			Console.Printf("\cgINIFile.MergeByActorClass called on an U2P_INIFile whose SectionCaseSensitive is set to true. This will almost certainly cause incorrect results, because class names are case-insensitive! Set SectionCaseSensitive to false *before* reading INI files and calling MergeByActorClass.");
			SectionCaseSensitive = false;
		}
		
		for (uint classIndex = 0, classCount = AllActorClasses.Size(); classIndex < classCount; classIndex++) {
			Class<Object> subjClass = AllActorClasses[classIndex];
			let subjName = subjClass.GetClassName();
			let subjSection = Section(subjName);
			let superSection = Section(subjName .. "-");
			
			// Walk up the list of superclasses.
			for (let parClass = subjClass; parClass; parClass = parClass.GetParentClass()) {
				let parName = parClass.GetClassName();
				
				// Merge in its + section, if any.
				let parSubSection = Section(parName .. "+");
				if (parSubSection) {
					if (!subjSection)
						subjSection = NewSection(subjName);
					subjSection.Merge(parSubSection);
				}
				
				// Merge in this class' - section, if any.
				if (superSection) {
					let parSection = NewSection(parName);
					parSection.Merge(superSection);
				}
				
				// Stop at Actor, ignoring its superclasses.
				// The only reason we do this is because there is no global list of non-actor classesâ€¦
				if (parClass == 'Actor')
					break;
			}
		}
		
		if (purgeNoMatch || purgeSuperSubSections)
		for (uint sectionIndex = Sections.Size() - 1; sectionIndex >= 0; sectionIndex--) {
			let sectionName = Sections[sectionIndex].Name;
			let nameLen = sectionName.Length();
			
			if (nameLen >= 2)
			switch (sectionName.CharCodeAt(nameLen - 1)) {
				case 43: // +
				case 45: // -
					if (purgeSuperSubSections) {
						Sections.Delete(sectionIndex);
						continue;
					}
					
					sectionName = sectionName.Left(nameLen - 1);
			}
			
			Class<Actor> sectionClass = sectionName;
			if (!sectionClass)
				Sections.Delete(sectionIndex);
		}
	}
}

class U2P_INISection {
	String Name;
	bool KeyCaseSensitive;
	Array<String> Keys, Values;
	
	uint IndexOf(String key) const {
		if (KeyCaseSensitive || key == "")
			return Keys.Find(key);
		else {
			uint idx, size;
			for (idx = 0, size = Keys.Size(); idx < size; idx++)
			if (Keys[idx] ~== key)
				break;
			return idx;
		}
	}
	
	String, uint Get(String key) const {
		let idx = IndexOf(key);
		return (idx == Values.Size()? "" : Values[idx]), idx;
	}
	
	int, uint GetInt(String key, int base = 0) const {
		String s;
		uint i;
		[s, i] = Get(key);
		return s.ToInt(base), i;
	}
	
	double, uint GetDouble(String key) const {
		String s;
		uint i;
		[s, i] = Get(key);
		return s.ToDouble(), i;
	}
	
	bool, uint GetBool(String key) const {
		String s;
		uint i;
		[s, i] = Get(key);
		return U2P_INIFile.ParseBool(s), i;
	}
	
	String, uint CurrentMapGet() const {
		return Get(level.MapName);
	}
	
	int, uint CurrentMapGetInt(int base = 0) const {
		return GetInt(level.MapName, base);
	}
	
	double, uint CurrentMapGetDouble() const {
		return GetDouble(level.MapName);
	}
	
	bool, uint CurrentMapGetBool() const {
		return GetBool(level.MapName);
	}
	
	String, uint Set(String key, String value) {
		let idx = IndexOf(key), ov = "";
		
		if (idx != Values.Size()) {
			ov = Values[idx];
			Values[idx] = value;
		}
		else {
			Keys.Push(key);
			Values.Push(value);
		}
		
		return ov, idx;
	}
	
	String Remove(String key) {
		let idx = IndexOf(key), ov = "";
		
		if (idx < Keys.Size()) {
			ov = Values[idx];
			Keys.Delete(idx);
			Values.Delete(idx);
		}
		
		return ov;
	}
	
	void Merge(U2P_INISection other, bool keepExisting = true) {
		for (uint otherIndex = 0, otherSize = other.Keys.Size(); otherIndex < otherSize; otherIndex++) {
			let myIndex = IndexOf(other.Keys[otherIndex]);
			
			if (myIndex == Keys.Size()) {
				Keys.Push(other.Keys[otherIndex]);
				Values.Push(other.Values[otherIndex]);
			}
			else if (!keepExisting)
				Values[myIndex] = other.Values[otherIndex];
		}
	}
}
